var Animation = function () {

    /**
     * 随机获取转入场动画 [需要页面引入 animate.css]
     * @param flag
     * @returns {string|string[]}
     */
    this.getAnimateIn = function (flag) { //获取转入场动画 键, 传入参数则返回数据, 不传则随机一个键
        var amIn = ["bounceIn", "bounceInDown", "bounceInLeft", "bounceInRight", "bounceInUp", "fadeIn", "fadeInDown", "fadeInDownBig", "fadeInLeft", "fadeInLeftBig", "fadeInRight", "fadeInRightBig", "fadeInUp", "fadeInUpBig", "flipInX", "flipInY", "lightSpeedIn", "rotateIn", "rotateInDownLeft", "rotateInDownRight", "rotateInUpLeft", "rotateInUpRight", "slideInDown", "slideInLeft", "slideInRight", "rollIn"];
        if (flag) {
            return amIn;
        }
        return amIn[Math.floor(Math.random() * amIn.length)];
    };

    /**
     * 随机获取转出场动画 [需要页面引入 animate.css]
     * @param flag
     * @returns {string|string[]}
     */
    this.getAnimateOut = function (flag) { //获取转出场动画 键, 传入参数则返回数据, 不传则随机一个键
        var amOut = ["bounceOut", "bounceOutDown", "bounceOutLeft", "bounceOutRight", "bounceOutUp", "fadeOut", "fadeOutDown", "fadeOutDownBig", "fadeOutLeft", "fadeOutLeftBig", "fadeOutRight", "fadeOutRightBig", "fadeOutUp", "fadeOutUpBig", "flipOutX", "flipOutY", "lightSpeedOut", "rotateOut", "rotateOutDownLeft", "rotateOutDownRight", "rotateOutUpLeft", "rotateOutUpRight", "slideOutUp", "slideOutLeft", "slideOutRight", "hinge", "rollOut"];
        if (flag) {
            return amOut;
        }
        return amOut[Math.floor(Math.random() * amOut.length)];
    };

    /**
     * 随机获取转驻场动画 [需要页面引入 animate.css]
     * @param flag
     * @returns {string|string[]}
     */
    this.getAnimateStay = function (flag) { //获取停驻场动画 键, 传入参数则返回数据, 不传则随机一个键
        var amStay = ["bounce", "flash", "pulse", "rubberBand", "shake", "swing", "tada", "wobble", "flip"];
        if (flag) {
            return amStay;
        }
        return amStay[Math.floor(Math.random() * amStay.length)];
    };
};
var animation = new Animation();

/**
 * 通用渲染进程处理库
 *
 * @constructor
 */
var ZXX = function () {

    /**
     * 检测连接是否可用 [支持跨域 和 404, 500 等网络错误]
     */
    this.doctorLink = function (url) {
        console.warn('[Doctor Link] ' + url);
        return new Promise(function (resolve, reject) {
            // 测试链接连通性, 主要检测404错误
            // 由于AJAX通常无法区分404和跨域问题
            // 所以只能用script 或者 link标签
            // link比script更容易捕获错误
            var dom = document.createElement('link');
            dom.href = url;
            dom.rel = 'stylesheet';
            document.head.appendChild(dom);
            dom.onload = function () {
                console.warn('[Doctor Link] ' + url + ' => Success!');
                document.head.removeChild(dom);
                resolve();
            }
            dom.onerror = function () {
                console.warn('[Doctor Link] ' + url + ' => Unsuccess!');
                reject();
            }
        });
    }

    /**
     * 智能处理 iframe
     *
     * @param target
     * @param src
     */
    this.dealIframe = function (target, src) {
        if (!$(target).attr('loadingHandler')) {
            this.doctorLink(src).then(function (data) {
                $(target).attr('src', src).attr('loadingHandler', 'true');
                $(target).load(function () {
                    $(this).removeAttr('loadingHandler');
                });
            }, function (data) {
                var nb_title = ($(target).attr('data-nb-title') && window.navigator.onLine) ? $(target).attr('data-nb-title') : '连接超时';
                var nb_des = ($(target).attr('data-nb-des') && window.navigator.onLine) ? $(target).attr('data-nb-des') : '目标页面暂时无法访问, 请检查您的网络或稍后重试...';
                var netbrokenPage = proxy.link(proxy.path.join(proxy.appVar._dirname, '../../view/errors/netbroken.html'), {
                    title: encodeURIComponent(encodeURIComponent(nb_title)),
                    des: encodeURIComponent(encodeURIComponent(nb_des))
                });
                console.warn('[Loading No Success] Auto Turn To => ' + netbrokenPage);
                $(target).attr('src', netbrokenPage);
                try {
                    if ($(target).attr('data-cmd')) {
                        top.vm.doctorReport($(target).attr('data-cmd'), $(target).attr('name'), netbrokenPage);
                        vm.doctorReport($(target).attr('data-cmd'), $(target).attr('name'), netbrokenPage);
                    }
                } catch (e) {
                    //... 尝试通知应用程序
                }
            });
        }
    }

    /**
     * 批量将iframe 的 data-src 渲染到 src, 配置了 data-nopreload="true" 的除外, 自行手动渲染
     * 该策略是为了防止 Chrome 自行对 iframe 进行缓存.
     */
    this.dealIframes = function () {
        var that = this;
        $('iframe[data-src]').each(function () {
            var src = $(this).attr('data-src');
            var lazy = $(this).attr('data-lazy');
            var orignSrc = $(this).attr('src');
            if (!orignSrc || orignSrc === '') {
                var nopreload = $(this).attr('data-nopreload');
                if (!(nopreload + '' === 'true')) {
                    var lazyTime = 1000;//懒加载默认时间: 1s
                    if (!isNaN(lazy + '') || (lazy + '' == 'true')) {
                        lazyTime = !isNaN(lazy + '') ? parseInt(lazy) : lazyTime;
                        setTimeout(() => {
                            console.debug('正在预懒加载[' + lazyTime + 'ms]: ' + src);
                            that.dealIframe(this, src);
                        }, lazyTime);
                    } else {
                        console.debug('正在预加载: ' + src);
                        that.dealIframe(this, src);
                    }
                }
            }
        });
        return this;
    };

    /**
     * 自动转入场控制 [需要页面引入 animate.css]
     */
    this.animateIn = function () {
        var elemClass = '.' + 'zxx-random-animate-in';
        $(elemClass).css("display", "none");
        $(elemClass).fadeIn(100).addClass('animated ' + animation.getAnimateIn());
        return this;
    };

    /**
     * 自动转出场控制 [需要页面引入 animate.css]
     */
    this.animateOut = function () {
        var elemClass = '.' + 'zxx-random-animate-out';
        $(elemClass).addClass('animated ' + animation.getAnimateOut()).fadeOut(500);
        return this;
    };

    /**
     * 自动转出场控制 [需要页面引入 animate.css]
     */
    this.animateStay = function () {
        var elemClass = '.' + 'zxx-random-animate-stay';
        $(elemClass).addClass('animated ' + animation.getAnimateStay());
        return this;
    };

    this.obj2formatstring = function (o, c) { //暴力拟格式化输出对象
        c = c ? c : 0;
        var sp = "";
        for (var i = 0; i < c; i++) {
            var spp = "  ";
            sp += spp;
        }
        var r = [];
        if (typeof o == "string") {
            return "\"" + o.replace(/([\'\"\\])/g, "\\$1").replace(/(\n)/g, "\\n").replace(/(\r)/g, "\\r").replace(/(\t)/g, "\\t") + "\"";
        }
        if (typeof o == "object") {
            if (!o.sort) {
                for (var i in o) {
                    r.push(sp + "  " + i + ":" + father.obj2formatstring(o[i], 2));
                }
                if (!!document.all && !/^\n?function\s*toString\(\)\s*\{\n?\s*\[native code\]\n?\s*\}\n?\s*$/.test(o.toString)) {
                    r.push("toString:" + o.toString.toString());
                }
                r = "{\n" + r.join(",\n") + "\n}";
            } else {
                for (var i = 0; i < o.length; i++) {
                    r.push(sp + "  " + father.obj2formatstring(o[i], 2))
                }
                r = "[\n" + r.join(",\n") + "\n]";
            }
            return r;
        }
        return o.toString();
    };

    /**
     * json对象转换成字符串
     * @param o
     * @returns {string}
     */
    this.converterJSONString = function (o) { //json对象转串
        var s = JSON.stringify(eval('(' + o + ')'), function (key, val) {
            if (typeof val === 'function') {
                return val + '';
            }
            return val;
        }, 2);
        return s.replace(/\\n/g, "");
    };

    /**
     * json串转对象, 第二个参数决定直接回传对象, 而不是格式化输出为字符串
     *
     * @param s
     * @param getObj
     * @returns {any}
     */
    this.converterJSONObject = function (s, getObj) {
        var o = JSON.parse(s, function (k, v) {
            if (v.indexOf && v.indexOf('function') > -1) {
                return eval("(function(){return " + v + " })()")
            }
            return v;
        });
        if (getObj) {
            return o.replace(/\\n/g, "");
        } else {
            return this.obj2formatstring(o).replace(/\\n/g, "");
        }
    };

    /**
     * 转义 HTML 脚本
     *
     * @param a
     * @returns {string}
     */
    this.escapeHTML = function (a) {
        a = "" + a;
        return a.replace(/&/g, "&amp;").replace(/</g, "&lt;").replace(/>/g, "&gt;").replace(/"/g, "&quot;").replace(/'/g, "&apos;");
    };

    /**
     * @function unescapeHTML 还原 HTML 转义脚本 < > & " '
     * @param a -
     *            字符串
     */
    this.unescapeHTML = function (a) {
        a = "" + a;
        return a.replace(/&lt;/g, "<").replace(/&gt;/g, ">").replace(/&amp;/g, "&").replace(/&quot;/g, '"').replace(/&apos;/g, "'");
    };

    /**
     * 去除字符串中的Html标签
     * @param a
     * @returns {string}
     */
    this.removeHtml = function (a) {
        a = "" + a;
        a = a.replace(/<br>/g, '\r\n').replace(/<br\/>/g, '\r\n').replace(/<\/br>/g, '\r\n');
        return a.replace(/<[^>]+>/g, "");
    };

    /**
     * 调起文件系统选择框
     *
     * @param multiple 是否支持多选
     * @param dir 是否只能进行文件夹选择
     * @param accept 限定类型 例如:  accept="image/gif, image/jpeg"
     * @param callback 回调
     */
    this.selectFile = function (multiple, dir, accept, callback) {
        // 创建input标签
        var inputObj = document.createElement('input')
        // 设置属性
        inputObj.setAttribute('id', '_zxx-select-file-ef');
        inputObj.setAttribute('type', 'file');
        inputObj.setAttribute("style", 'visibility:hidden');
        accept ? inputObj.setAttribute('accept', accept) : '';
        multiple ? inputObj.setAttribute('multiple', 'multiple') : '';
        if (dir) { // 如果要选择目录路径，则添加以下两个属性
            inputObj.setAttribute('webkitdirectory', "");
            inputObj.setAttribute('directory', "");
        }
        // 添加到DOM中
        document.body.appendChild(inputObj);
        // 添加事件监听器
        inputObj.addEventListener("change", function () {
            var inputObj = document.getElementById("_zxx-select-file-ef");
            var files = inputObj.files;
            if (typeof callback === 'function') {
                callback(files);
            }
            // 移除事件监听器
            inputObj.removeEventListener("change", function () {
            });
            // 从DOM中移除input
            document.body.removeChild(inputObj);
        });
        // 模拟点击
        inputObj.click();
    }

    /**
     * 剪贴板逻辑
     */
    this.writeClipboard = function () {
        var that = this;
        var elemClass = '.' + 'zxx-clipboard';
        $('body').on('click', elemClass, function (e) {
            var text = $(this).attr('clipboard-content');
            if (text && (text + '').trim() != '') {
                proxy.clipboard.writeText(text); //第二参数 type: 在 X Window 系统上, 有一个可选的 clipboard. 你可以为每个方法使用 selection 来控制它. 无法跨平台, 不建议使用.
                console.debug('成功复制数据到剪贴板');
                console.debug(text);

                e.preventDefault();
                e.stopPropagation();
                return false; //防止冒泡.
            } else {
                var ccElem = $(this).find('[zxx-for="clipboard-content"]');
                if (ccElem.length > 0) {
                    if (ccElem.attr('clipboard-writetype') == 'html') {
                        proxy.clipboard.writeHtml(ccElem.html());
                        console.debug('成功复制数据到剪贴板');
                        console.debug($(ccElem.html()));
                    } else {
                        proxy.clipboard.writeText(that.removeHtml(ccElem.html()));
                        console.debug('成功复制数据到剪贴板');
                        console.debug(that.removeHtml(ccElem.html()));
                    }

                    e.preventDefault();
                    e.stopPropagation();
                    return false; //防止冒泡.
                }
            }
        });
        return this;
    };

    /**
     * 右键上下文菜单自动配置
     */
    this.configMenu = function () {
        var that = this;
        var elemClass = '.' + 'zxx-menu-listener';
        $('body').on('mousedown', elemClass, function (e) {
            e = e || window.event;
            if (3 === e.which) {
                //右键单击
                var elem = $(e.target);
                if (!elem.attr('zxx-menu')) {
                    elem = elem.parents('[zxx-menu]');
                }
                var menuKey = elem.attr('zxx-menu');
                console.debug('右键菜单: ' + menuKey);
                var mItems = eval('autoContextMenu.' + menuKey)(elem);
                console.debug(mItems);
                proxy.popupMenu(mItems);
                // e.stopPropagation();
            } else if (1 === e.which) {
                //左键单击
            }
        });
        return this;
    };

    /**
     * 设定一个方法, 锁定a的链接跳转, 转为系统默认浏览器打开, 而不是新建客户端窗口打开.
     * @private
     */
    this.lockAHref = function () {
        $("a[href^='http']").attr({
            'target': '_blank'
        }).attr('openExternal', 'true');
        return this;
    }

    /**
     * 自动化添加统计脚本
     */
    this.censusScript = function () {
        if ($('html').is('[zxx-census]') && window.navigator.onLine) {
            T.i(proxy.appVar._censusscript, 'body');
        }
        return this;
    }

    /**
     * 前往控制面板某一模块, 支持不同窗口, 支持隐藏调起.
     * @param tabName 不传默认首 Tab, 该值必须有效, 否则没有反应, 仅显示窗口而已.
     */
    this.gotoControlTab = function (tabName) {
        tabName = tabName ? tabName : 'mydesk';
        proxy.ipc.send('ipc_window_open', 'control', true, {
            tab: tabName
        });
    }

    /**
     * 前往社区的某一篇帖子或社区的链接地址 [该地址应该是提前约定好的]
     * 支持不同窗口, 支持隐藏调起.
     * @param keyOrUrl
     */
    this.gotoBbs = function (keyOrUrl) {
        this.gotoControlTab('resbbs');
        if (keyOrUrl && (keyOrUrl + '').trim() !== '') {
            if (keyOrUrl.indexOf && keyOrUrl.indexOf('http') === 0) { //是地址
                //...
            } else {
                keyOrUrl = proxy.appVar._upath[keyOrUrl];
            }
            proxy.appVar._controlwindow.webContents.send('ipc_render_control_resbbs_changeurl', proxy.link(keyOrUrl, {
                requestType: 'ipcInClient'
            }));
        }
    }

    /**
     * 提供 url, 支持前往桌面商店应用的任意一个位置
     * 支持不同窗口, 支持隐藏调起.
     * @param url
     */
    this.gotoStore = function (url) {
        this.gotoControlTab('deskstore');
        proxy.appVar._controlwindow.webContents.send('ipc_render_control_deskstore_changeurl', proxy.link(url, {
            requestType: 'ipcInClient'
        }));
    }
};
var $$ = new ZXX();

$(function () {
    $$.dealIframes().configMenu();

    //事件代理
    var body = $('body');
    body.on("click", "a[href^='http']", function () {
        $$.lockAHref();
        var url = $(this).attr('href');
        proxy.openExternal(url);
        return false; //阻止href动作.
    }).on('click', "button.el-tooltip[data-zxx-map]", function () {
        var mapKey = $(this).attr('data-zxx-map');
        $$.gotoBbs(mapKey);
    });
});

$(window).ready(function () {
    $$.animateIn().animateStay().animateOut()
    setTimeout(() => {
        $$.writeClipboard().censusScript();

        /**
         * 跨域消息通信, 为保证安全性, 弄一下常规的消息传递就好.
         */
        window.addEventListener('message', function (rs) {
            console.warn('[父域] 接收到跨域窗口通信消息');
            console.debug(rs);
            try {
                if ((rs.origin + '/').indexOf(vm.origin) > -1) {
                    console.warn('有效源 => 尝试处理并传递通信句柄...');
                    /**
                     * 默认约定消息处理
                     * 消息格式:
                     * location: 目标页地址
                     * command: 通信指令
                     * data: {}, 数据
                     */
                    var data = rs.data.data;
                    switch (rs.data.command) {
                        case 'dialog.alert':
                            proxy.alert(data.message, data.detail, data.type, data.btns);
                            break;
                        case 'goto.controlTab':
                            $$.gotoControlTab(data.tabName);
                            break;
                        case 'goto.bbs':
                            $$.gotoBbs(data.keyOrUrl);
                            break;
                        case 'goto.store':
                            $$.gotoStore(data.url);
                            break;
                        case 'control.showloading':
                            try {
                                proxy.appVar._controlwindow.webContents.send('ipc_render_control_showloading', data.text, data.dur);
                            } catch (e) {
                            }
                            break;
                        case 'control.showmsg':
                            try {
                                proxy.appVar._controlwindow.webContents.send('ipc_render_control_showmsg', data.content, data.type, data.duration, data.closable, data.nodestory);
                            } catch (e) {
                            }
                            break;
                        default:
                            break;
                    }
                    vm.getMessage(rs); //传递句柄
                } else {
                    console.warn('无效源, 通信拦截 END.');
                }
            } catch (e) {
                console.debug('当前页面尚未提供消息接收句柄, 通信失败');
            }
        });
    }, 1000);
});


/**
 * 断网联网监听
 */
window.addEventListener('online', function () {
    // let option = {
    //     title: "有网了!",
    //     body: "机子帮你开好了, 快来上网啊~",
    //     icon: "../../assets/images/online.png",
    // };
    // // 创建上线通知
    // new window.Notification(option.title, option);
    $('.popper-tooltip').removeClass('popper-only-online').addClass('popper-only-online');
    if ($('html').attr('scope') === 'control') {
        vm.isOnline();
    }
});

window.addEventListener('offline', function () {
    // let option = {
    //     title: "断网了!",
    //     body: "尝尝10亿伏特!还敢上网不?(炮姐如是说!)",
    //     icon: "../../assets/images/offline.png",
    // };
    // // 创建上线通知
    // new window.Notification(option.title, option);
    $('.popper-tooltip').removeClass('popper-only-online');
    if ($('html').attr('scope') === 'control') {
        vm.isOffline();
    }
});